#!/usr/bin/env python
#
# Author: Sebastian Wouters <sebastianwouters@gmail.com>
#
# Date: May 18, 2015
#
# Test file to illustrate the usage of the rhf_NewtonRaphson tool
#
# The gradient and hessian were determined from the equations in
# http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1CASSCF.html
# by throwing out all active space components.
#

import sys
from pyscf import gto, scf
from pyscf.tools import rhf_newtonraphson
import numpy as np

mol = gto.Mole() # Buckyball optimized with B3LYP/cc-pVDZ
mol.atom = '''
    C            0.000000000000    -0.698863692631     3.485659405234
    C           -0.000000000000     0.698863692631     3.485659405234
    C           -1.177413455163    -1.426586745678     3.035930309273
    C           -2.308221759410    -0.727692905561     2.604000392388
    C           -0.727692843917    -2.604000227480     2.308221628935
    C           -1.426586686597    -3.035930312767     1.177413473440
    C            0.727692843917    -2.604000227480     2.308221628935
    C            1.426586686597    -3.035930312767     1.177413473440
    C            1.177413455163    -1.426586745678     3.035930309273
    C            2.308221759410    -0.727692905561     2.604000392388
    C            1.426586686597     3.035930312767     1.177413473440
    C            0.727692843917     2.604000227480     2.308221628935
    C            0.698863670302     3.485659413332     0.000000000000
    C           -0.698863670302     3.485659413332     0.000000000000
    C            2.604000385623     2.308221792277    -0.727692910676
    C            3.035930522186     1.177413550960    -1.426586813835
    C            2.604000385623     2.308221792277     0.727692910676
    C            3.035930522186     1.177413550960     1.426586813835
    C            1.426586686597     3.035930312767    -1.177413473440
    C            0.727692843917     2.604000227480    -2.308221628935
    C           -0.727692843917     2.604000227480     2.308221628935
    C           -1.426586686597     3.035930312767     1.177413473440
    C           -1.177413455163     1.426586745678     3.035930309273
    C           -2.308221759410     0.727692905561     2.604000392388
    C            1.177413455163     1.426586745678     3.035930309273
    C            2.308221759410     0.727692905561     2.604000392388
    C           -2.604000385623     2.308221792277     0.727692910676
    C           -3.035930522186     1.177413550960     1.426586813835
    C           -2.604000385623     2.308221792277    -0.727692910676
    C           -3.035930522186     1.177413550960    -1.426586813835
    C           -1.426586686597     3.035930312767    -1.177413473440
    C           -0.727692843917     2.604000227480    -2.308221628935
    C           -3.485659767723    -0.000000000000     0.698863749657
    C           -3.485659767723    -0.000000000000    -0.698863749657
    C           -3.035930522186    -1.177413550960     1.426586813835
    C           -2.604000385623    -2.308221792277     0.727692910676
    C           -3.035930522186    -1.177413550960    -1.426586813835
    C           -2.604000385623    -2.308221792277    -0.727692910676
    C           -2.308221759410    -0.727692905561    -2.604000392388
    C           -1.177413455163    -1.426586745678    -3.035930309273
    C           -2.308221759410     0.727692905561    -2.604000392388
    C           -1.177413455163     1.426586745678    -3.035930309273
    C           -1.426586686597    -3.035930312767    -1.177413473440
    C           -0.727692843917    -2.604000227480    -2.308221628935
    C           -0.698863670302    -3.485659413332     0.000000000000
    C            0.698863670302    -3.485659413332     0.000000000000
    C            0.727692843917    -2.604000227480    -2.308221628935
    C            1.426586686597    -3.035930312767    -1.177413473440
    C            1.177413455163    -1.426586745678    -3.035930309273
    C            2.308221759410    -0.727692905561    -2.604000392388
    C            0.000000000000    -0.698863692631    -3.485659405234
    C           -0.000000000000     0.698863692631    -3.485659405234
    C            2.604000385623    -2.308221792277    -0.727692910676
    C            3.035930522186    -1.177413550960    -1.426586813835
    C            2.604000385623    -2.308221792277     0.727692910676
    C            3.035930522186    -1.177413550960     1.426586813835
    C            3.485659767723     0.000000000000    -0.698863749657
    C            3.485659767723     0.000000000000     0.698863749657
    C            2.308221759410     0.727692905561    -2.604000392388
    C            1.177413455163     1.426586745678    -3.035930309273
  '''
mol.basis = 'sto-3g'
mol.symmetry = 0
mol.charge = 0
mol.spin = 0 #2*S; multiplicity-1
mol.build()

# Perform RHF calculation
mf = scf.RHF( mol )
mf.verbose = 4
mf.scf()
Energy1 = mf.e_tot

# Redo with Newton-Raphson --> start from 'minao' guess
mf = rhf_newtonraphson.solve( mf, safe_guess=True )
Energy2 = mf.e_tot

assert( abs( Energy1 - Energy2 ) < 1e-9 )



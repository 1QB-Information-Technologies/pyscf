Currently working:
- Gamma point and super cell: HFX and DFT
- K points: DFT

Needs testing:
- Band structure (from Gamma pt) - compare to QE [T]
- Shifted Gamma pt calc (e.g. at Baldereschi pt) [T]
- l=2 PP projectors (i.e. 3rd row) [T]
X Divergent J+Vloc G=0 contribution [T]

Long list of things to do!                                       
 
Code doc and cleaning:
- Clean mf.grad() [Q]
X PP and ECP unification (e.g. init guess routines check nelec_ecp) [T&Q]
X Check "checkpt" works
X Doc KSCF class [T]
- Test infrastructure and examples for
  - K pt calcs
  - band structure
  - Gamma pt HFX
- Initial guess: check which ones are correct for PBC / PP / KSCF
X Change kpt shape so that it does not always get reshaped? [T]

Ease of calc:
- Test energy_cutoff -> gs fn in tools/pbc.py
- Add dtype member variable, complex128 default, can be set to real64 for 
  gamma pt, special kpts, etc. [T]
- Better cutoff fn for lattice sums (from integral Schwartz condition)
- ASE DFT calculator interface

SCF convergence:
- Near linear dependencies in ovlp should be projected out
  (canonical orthogonalization) in HF routine.                 [Q] 
- Finite temperature smearing

Other Functionality:
- q->0 term for (ia|jb) integral, by finite difference q calc [J]
- Band structure for K pt calc [T]
  - Grid based veff or
  - Grid based general <p(k)|q(k')> ovlp 
- Poisson equation [Q]
  X use compensating charge (uniform)  [Done]
  X use compensating charge (Gaussian)   [Done]
    - compensating dipole (Gaussian)
  X Molecular XC grids  [Done]
- UHF code and UHF initial guess (specify mag. moment for AFM)
- 1D and 2D Coulomb and Ewald
- Exchange part of Fock matrix with k-points [J]
- Exact HF exchange
- Gamma pt MP2
  - check q->0, compare against VASP / CP2K 
- Gamma pt CCSD
- IP/EA/EE-EOM-CCSD 
  - Gamma pt
  - General spin-orb -> spin-orb -> restricted
  - Kpt
- Ewald cutoff esp. for non-cubic cells

Efficiency:
- DFT KNumInt uses inefficient nr_vxc
- K pt MPI loop
- GTH ECP analytic integrals
- Time-reversal symmetry
  - K pts in Brillouin zone
  - Grid in FFT
- Abelian cell symmetry (See symmetry class in GPAW)
  - Lattice sums
  - Grids
- Profile code
  - Store AO's on grid
  - Store (i|j) AO integrals, then fourier transform
    to generate lattice sums
  - Integral screening

---
DONE(T):
x Streamline cell construction 
  x add 'precision' to cell, use to set nimgs, ewald parameters in build()

  (Poisson)
  [can use: 
       constant charge for usual PBC
       compensating 1/r charge if density vanishes at boundary (e.g. molecule)
       possibly grid of Gaussians for PBC with lots of vacuum]

- Add atomic-based grids for PBC

- Clean-up, document, and integrate: 
    scf/kscf.py
    df/df.py

- Decide on best place for remaining tools/pbc.py functions:
    fft/ifft
    get_coulG

- Store coords/aoR?

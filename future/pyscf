#!/usr/bin/env python
#
# File: pyscf
# Author: Qiming Sun <osirpt.sun@gmail.com>
#

import sys
import re
import tempfile
from pyscf import lib

def parse(s):
    words = re.split('[,; ]+',s)
    iw = 0
    atom = []
    symb = [i.upper() for i in lib.parameters.ELEMENTS_PROTON.keys()]
    elements = dict(zip(symb, lib.parameters.ELEMENTS_PROTON.values()))
    xc = None
    while iw < len(words):
        if '/' in words[iw]:
            method, basis = words[iw].split('/')
            method = method.upper()
            if method in ('VWN','P86','LYP','PBE','PW91', 'XLYP'):
                if iw > 0 and \
                       words[iw-1].upper() in \
                       ('LDA','B88','B86','PBE','PW91'):
                    xc = ','.join((words[iw-1].upper(), method))
                    method = 'RKS'
                else:
                    raise KeyError('Unknown XC functional')
            elif method in ('B3LYP','B3PW91','B3P86'):
                xc = method
                method = 'RKS'
        elif words[iw].upper() in elements:
            atom.append((elements[words[iw].upper()],
                         map(float, (words[iw+1:iw+4]))))
            iw += 3
        iw += 1

    return {'atom':atom, 'basis':basis, 'method':method, 'xc':xc}

def run(argv):
    '''One line input

Examples
--------

Keywords and values for input-dict are case-insensitive.

>>> import pyscf
>>> pyscf.run('hf/sto-3g, h,0,0,0; h,0,0,1')

'''
    w = parse(argv)
    inp = '''from pyscf import gto, scf
mol = gto.Mole()
mol.verbose = 4
mol.output = None
mol.atom = %s
mol.basis = {''' % w['atom']
    atms = set([i[0] for i in w['atom']])
    for at in atms:
        inp += '''%s: '%s',''' % (at, w['basis'])
    inp += '''}
mol.build(False, False)
'''
    if w['method'] in ('RHF', 'UHF'):
        inp += '''
m = scf.%s(mol)
m.scf()
''' % w['method']
    elif w['method'] in ('RKS',):
        inp += '''from pyscf import dft
m = dft.%s(mol)
m.scf()
''' % w['method']
    else:
        inp += '''
if mol.nelectron%2 == 1:
    m = scf.UHF(mol)
else:
    m = scf.RHF(mol)
m.scf()
'''
        if w['method'] in ('HF',):
            pass
        elif w['method'] in ('MP2',):
            inp += '''import mp
mp.mp2(m)
'''
        elif w['method'] in ('CISD',):
            inp += '''import cisd
cisd.cisd(m)
'''
        elif w['method'] in ('CCSD',):
            inp += '''import ccsd
ccsd.ccsd(m)
'''
        elif w['method'] in ('FCI',):
            inp += '''import fci
fci.fci(m)
'''
        else:
            raise KeyError('Unknown method %s' % w['method'])
    print '**** input script ****'
    print inp
    print '**** input script end ****'
    exec(inp)


if __name__ == '__main__':
    run(sys.argv[1])
